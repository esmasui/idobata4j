buildscript {
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.2'
    }
}

apply plugin: 'java'
apply plugin: 'nexus'

targetCompatibility = '1.6'
sourceCompatibility = '1.6'

configurations {
    provided
    tools
    attachSources
    attachJavadoc
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

dependencies {
    provided "org.json:json:${jsonVersion}"
    attachSources "org.json:json:${jsonVersion}:sources"
    attachJavadoc "org.json:json:${jsonVersion}:javadoc"

    provided "com.pusher:pusher-java-client:${pusherVersion}"
    attachSources "com.pusher:pusher-java-client:${pusherVersion}:sources"
    attachJavadoc "com.pusher:pusher-java-client:${pusherVersion}:javadoc"

    attachSources "com.google.code.gson:gson:${gsonVersion}:sources"
    attachJavadoc "com.google.code.gson:gson:${gsonVersion}:javadoc"

    attachSources "org.slf4j:slf4j-api:${slf4jVersion}:sources"
    attachJavadoc "org.slf4j:slf4j-api:${slf4jVersion}:javadoc"

    testCompile "org.json:json:${jsonVersion}"
    testCompile "com.pusher:pusher-java-client:${pusherVersion}"

    testCompile("junit:junit:${junitVersion}") {
        exclude group: 'org.hamcrest'
    }
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.easytesting:fest-assert-core:${festVersion}"

    tools 'com.googlecode.jarjar:jarjar:1.3'
}


// useful example: https://github.com/kohsuke/package-renamed-asm/blob/master/build.gradle
// , http://svn.codehaus.org/groovy/branches/GROOVY_1_8_X/gradle/assemble.gradle
// and http://forums.gradle.org/gradle/topics/is_there_a_maven_shade_plugin_equivalent_in_gradle
def jarjar(task, configName) {
    task.doLast {
        def p = project   // to avoid name conflict
        def jarjarArchivePath = new File(task.archivePath.absolutePath + ".jarjar.jar")
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
            jarjar(jarfile: jarjarArchivePath, filesetmanifest: "merge") {
                zipfileset(src: task.archivePath)
                configurations[configName].each {file ->
                    zipfileset(src: file)
                }
                rule pattern: "org.json.**", result: p.group+".internal.json.@1"
                rule pattern: "com.google.gson.**", result: p.group+".internal.gson.@1"
                rule pattern: "com.pusher.client.**", result: p.group+".internal.pusher_java_client.@1"
                rule pattern: "org.java_websocket.**", result: p.group+".internal.java_websocket.@1"
                rule pattern: "org.slf4j.**", result: p.group+".internal.slf4j.@1"
            }
            delete(file: task.archivePath)
            copy(file: jarjarArchivePath, tofile: task.archivePath)
            delete(file: jarjarArchivePath)
        }
    }
}

jar {
    jarjar(delegate, "provided")
}

sourcesJar {
    jarjar(delegate, "attachSources")
}

javadocJar {
    jarjar(delegate, "attachJavadoc")
}


modifyPom {
    project {
        name "Idobata4J"
        description POM_DESCRIPTION
        url POM_URL

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
            }
        }
    }
}
